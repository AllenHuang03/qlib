-- Qlib AI Trading Platform - Production Database Schema
-- Designed for separation between consumer interface and admin management

-- ================================
-- USER MANAGEMENT
-- ================================

-- Users table - both retail users and admin users
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    name VARCHAR(255) NOT NULL,
    role VARCHAR(50) NOT NULL CHECK (role IN ('user', 'admin', 'analyst')),
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'suspended', 'pending')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    last_login TIMESTAMP,
    
    -- User profile info
    location VARCHAR(255),
    risk_tolerance INTEGER CHECK (risk_tolerance BETWEEN 1 AND 5),
    investment_goal VARCHAR(100),
    experience_level VARCHAR(50) CHECK (experience_level IN ('beginner', 'some', 'experienced'))
);

-- User portfolios (supports both paper trading and real money)
CREATE TABLE portfolios (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL CHECK (type IN ('paper', 'real')),
    initial_value DECIMAL(15,2) NOT NULL,
    current_value DECIMAL(15,2) NOT NULL,
    cash_balance DECIMAL(15,2) NOT NULL,
    total_return DECIMAL(10,4),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ================================
-- AI MODELS & STRATEGIES
-- ================================

-- Qlib model configurations and metadata
CREATE TABLE ai_models (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(255) NOT NULL,
    display_name VARCHAR(255) NOT NULL, -- Consumer-friendly name like "AI Stock Picker #1"
    description TEXT,
    model_type VARCHAR(100) NOT NULL, -- LSTM, LightGBM, Transformer, etc.
    config JSONB NOT NULL, -- Qlib model configuration
    status VARCHAR(50) DEFAULT 'training' CHECK (status IN ('training', 'active', 'paused', 'stopped', 'failed')),
    
    -- Performance metrics
    accuracy DECIMAL(5,2),
    sharpe_ratio DECIMAL(5,2),
    max_drawdown DECIMAL(5,2),
    win_rate DECIMAL(5,2),
    total_trades INTEGER DEFAULT 0,
    profitable_trades INTEGER DEFAULT 0,
    
    -- Model training info
    training_start TIMESTAMP,
    training_end TIMESTAMP,
    last_retrained TIMESTAMP,
    
    -- Admin fields
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- User model subscriptions (which models each user follows)
CREATE TABLE user_model_subscriptions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    model_id UUID NOT NULL REFERENCES ai_models(id) ON DELETE CASCADE,
    portfolio_id UUID NOT NULL REFERENCES portfolios(id) ON DELETE CASCADE,
    allocation_percentage DECIMAL(5,2) NOT NULL CHECK (allocation_percentage BETWEEN 0 AND 100),
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'paused')),
    subscribed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(user_id, model_id, portfolio_id)
);

-- ================================
-- TRADING DATA
-- ================================

-- Trading signals generated by AI models
CREATE TABLE trading_signals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id UUID NOT NULL REFERENCES ai_models(id),
    symbol VARCHAR(20) NOT NULL,
    signal_type VARCHAR(10) NOT NULL CHECK (signal_type IN ('BUY', 'SELL', 'HOLD')),
    confidence DECIMAL(5,2) NOT NULL CHECK (confidence BETWEEN 0 AND 100),
    target_price DECIMAL(10,2),
    current_price DECIMAL(10,2) NOT NULL,
    
    -- AI reasoning (for transparency feature)
    reasoning TEXT,
    key_factors JSONB, -- Structured data for AI explanation modal
    
    -- Signal metadata  
    generated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    expires_at TIMESTAMP,
    status VARCHAR(50) DEFAULT 'active' CHECK (status IN ('active', 'executed', 'expired', 'cancelled'))
);

-- Actual trades executed by users
CREATE TABLE trades (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id),
    portfolio_id UUID NOT NULL REFERENCES portfolios(id),
    model_id UUID REFERENCES ai_models(id), -- NULL if manual trade
    signal_id UUID REFERENCES trading_signals(id), -- NULL if manual trade
    
    symbol VARCHAR(20) NOT NULL,
    trade_type VARCHAR(10) NOT NULL CHECK (trade_type IN ('BUY', 'SELL')),
    quantity INTEGER NOT NULL CHECK (quantity > 0),
    price DECIMAL(10,2) NOT NULL,
    total_value DECIMAL(15,2) NOT NULL,
    fees DECIMAL(10,2) DEFAULT 0,
    
    -- Trade execution details
    executed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'executed', 'failed', 'cancelled'))
);

-- Current holdings in each portfolio
CREATE TABLE holdings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    portfolio_id UUID NOT NULL REFERENCES portfolios(id) ON DELETE CASCADE,
    symbol VARCHAR(20) NOT NULL,
    quantity INTEGER NOT NULL CHECK (quantity >= 0),
    average_cost DECIMAL(10,2) NOT NULL,
    current_price DECIMAL(10,2) NOT NULL,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(portfolio_id, symbol)
);

-- ================================
-- BACKTESTING & PERFORMANCE
-- ================================

-- Backtesting jobs and results
CREATE TABLE backtests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id UUID NOT NULL REFERENCES ai_models(id),
    name VARCHAR(255) NOT NULL,
    
    -- Backtest parameters
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    initial_capital DECIMAL(15,2) NOT NULL,
    benchmark VARCHAR(20) DEFAULT 'SPY',
    
    -- Results
    final_value DECIMAL(15,2),
    total_return DECIMAL(10,4),
    sharpe_ratio DECIMAL(5,2),
    max_drawdown DECIMAL(5,2),
    volatility DECIMAL(5,2),
    win_rate DECIMAL(5,2),
    total_trades INTEGER,
    
    -- Execution info
    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'running', 'completed', 'failed')),
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    error_message TEXT,
    
    -- Admin tracking
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Daily performance data for backtests and live portfolios
CREATE TABLE performance_data (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    reference_id UUID NOT NULL, -- backtest_id or portfolio_id
    reference_type VARCHAR(50) NOT NULL CHECK (reference_type IN ('backtest', 'portfolio')),
    date DATE NOT NULL,
    
    -- Daily metrics
    portfolio_value DECIMAL(15,2) NOT NULL,
    benchmark_value DECIMAL(15,2),
    daily_return DECIMAL(8,4),
    cumulative_return DECIMAL(8,4),
    
    recorded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(reference_id, reference_type, date)
);

-- ================================
-- MARKET DATA
-- ================================

-- Market data cache (from yfinance/other providers)
CREATE TABLE market_data (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    symbol VARCHAR(20) NOT NULL,
    date DATE NOT NULL,
    
    -- OHLCV data
    open_price DECIMAL(10,2),
    high_price DECIMAL(10,2),
    low_price DECIMAL(10,2),
    close_price DECIMAL(10,2),
    volume BIGINT,
    adjusted_close DECIMAL(10,2),
    
    -- Technical indicators (computed)
    sma_20 DECIMAL(10,2),
    sma_50 DECIMAL(10,2),
    ema_12 DECIMAL(10,2),
    rsi DECIMAL(5,2),
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(symbol, date)
);

-- Real-time market data (latest prices)
CREATE TABLE market_data_realtime (
    symbol VARCHAR(20) PRIMARY KEY,
    price DECIMAL(10,2) NOT NULL,
    change_amount DECIMAL(10,2),
    change_percentage DECIMAL(5,2),
    volume BIGINT,
    last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ================================
-- SOCIAL FEATURES
-- ================================

-- Community posts and interactions
CREATE TABLE community_posts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES users(id),
    type VARCHAR(50) NOT NULL CHECK (type IN ('win', 'strategy', 'tip', 'question')),
    content TEXT NOT NULL,
    
    -- Optional trade/profit details
    symbol VARCHAR(20),
    profit_amount DECIMAL(10,2),
    
    -- Engagement metrics
    likes_count INTEGER DEFAULT 0,
    comments_count INTEGER DEFAULT 0,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Post likes
CREATE TABLE post_likes (
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    post_id UUID REFERENCES community_posts(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, post_id)
);

-- User following relationships
CREATE TABLE user_follows (
    follower_id UUID REFERENCES users(id) ON DELETE CASCADE,
    following_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (follower_id, following_id),
    CHECK (follower_id != following_id)
);

-- ================================
-- ADMIN & SYSTEM
-- ================================

-- System configuration and feature flags
CREATE TABLE system_config (
    key VARCHAR(100) PRIMARY KEY,
    value TEXT NOT NULL,
    description TEXT,
    updated_by UUID REFERENCES users(id),
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Admin audit log
CREATE TABLE admin_audit_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    admin_id UUID NOT NULL REFERENCES users(id),
    action VARCHAR(100) NOT NULL,
    entity_type VARCHAR(50) NOT NULL,
    entity_id UUID,
    changes JSONB,
    ip_address INET,
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Model training logs
CREATE TABLE model_training_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    model_id UUID NOT NULL REFERENCES ai_models(id),
    training_job_id VARCHAR(255),
    log_level VARCHAR(20) CHECK (log_level IN ('DEBUG', 'INFO', 'WARNING', 'ERROR')),
    message TEXT NOT NULL,
    details JSONB,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ================================
-- INDEXES FOR PERFORMANCE
-- ================================

-- User indexes
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_role ON users(role);
CREATE INDEX idx_users_status ON users(status);

-- Portfolio indexes
CREATE INDEX idx_portfolios_user_id ON portfolios(user_id);
CREATE INDEX idx_portfolios_type ON portfolios(type);

-- Trading indexes
CREATE INDEX idx_trading_signals_model_id ON trading_signals(model_id);
CREATE INDEX idx_trading_signals_symbol ON trading_signals(symbol);
CREATE INDEX idx_trading_signals_generated_at ON trading_signals(generated_at DESC);
CREATE INDEX idx_trades_user_id ON trades(user_id);
CREATE INDEX idx_trades_portfolio_id ON trades(portfolio_id);
CREATE INDEX idx_trades_executed_at ON trades(executed_at DESC);

-- Performance indexes
CREATE INDEX idx_performance_data_reference ON performance_data(reference_id, reference_type);
CREATE INDEX idx_performance_data_date ON performance_data(date DESC);

-- Market data indexes
CREATE INDEX idx_market_data_symbol_date ON market_data(symbol, date DESC);
CREATE INDEX idx_market_data_date ON market_data(date DESC);

-- Community indexes
CREATE INDEX idx_community_posts_user_id ON community_posts(user_id);
CREATE INDEX idx_community_posts_created_at ON community_posts(created_at DESC);

-- ================================
-- INITIAL DATA
-- ================================

-- Insert system config defaults
INSERT INTO system_config (key, value, description) VALUES
('maintenance_mode', 'false', 'Enable maintenance mode to disable trading'),
('paper_trading_enabled', 'true', 'Allow new users to start with paper trading'),
('real_trading_enabled', 'false', 'Allow users to trade with real money'),
('max_models_per_user', '5', 'Maximum AI models a user can subscribe to'),
('model_training_enabled', 'true', 'Allow admins to train new models'),
('community_enabled', 'true', 'Enable community features');

-- Create admin user (password should be changed immediately)
INSERT INTO users (email, password_hash, name, role, status) VALUES 
('admin@qlib.ai', '$2b$12$placeholder_hash_change_immediately', 'System Administrator', 'admin', 'active');

-- ================================
-- VIEWS FOR COMMON QUERIES
-- ================================

-- User portfolio summary view
CREATE VIEW user_portfolio_summary AS
SELECT 
    p.id,
    p.user_id,
    p.name,
    p.type,
    p.current_value,
    p.total_return,
    COUNT(h.id) as holdings_count,
    COUNT(ums.id) as active_models,
    p.updated_at
FROM portfolios p
LEFT JOIN holdings h ON p.id = h.portfolio_id AND h.quantity > 0
LEFT JOIN user_model_subscriptions ums ON p.id = ums.portfolio_id AND ums.status = 'active'
GROUP BY p.id, p.user_id, p.name, p.type, p.current_value, p.total_return, p.updated_at;

-- Model performance summary view
CREATE VIEW model_performance_summary AS
SELECT 
    m.id,
    m.name,
    m.display_name,
    m.model_type,
    m.status,
    m.accuracy,
    m.sharpe_ratio,
    m.win_rate,
    COUNT(DISTINCT ums.user_id) as subscribers,
    COUNT(DISTINCT ts.id) as signals_generated,
    AVG(ts.confidence) as avg_confidence,
    m.updated_at
FROM ai_models m
LEFT JOIN user_model_subscriptions ums ON m.id = ums.model_id AND ums.status = 'active'
LEFT JOIN trading_signals ts ON m.id = ts.model_id
GROUP BY m.id, m.name, m.display_name, m.model_type, m.status, m.accuracy, m.sharpe_ratio, m.win_rate, m.updated_at;

-- Top performing users view (for community leaderboard)
CREATE VIEW top_performers AS
SELECT 
    u.id,
    u.name,
    u.location,
    AVG(p.total_return) as avg_return,
    SUM(CASE WHEN p.type = 'real' THEN p.current_value - p.initial_value ELSE 0 END) as real_profits,
    COUNT(DISTINCT ums.model_id) as models_used,
    COUNT(f.follower_id) as followers_count,
    u.created_at
FROM users u
LEFT JOIN portfolios p ON u.id = p.user_id
LEFT JOIN user_model_subscriptions ums ON u.id = ums.user_id AND ums.status = 'active'  
LEFT JOIN user_follows f ON u.id = f.following_id
WHERE u.role = 'user' AND u.status = 'active'
GROUP BY u.id, u.name, u.location, u.created_at
HAVING AVG(p.total_return) IS NOT NULL
ORDER BY avg_return DESC;